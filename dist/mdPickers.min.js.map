{"version":3,"sources":["mdPickers.min.js"],"names":["DatePickerCtrl","$scope","$mdDialog","$mdMedia","$timeout","currentDate","options","self","this","$onInit","date","moment","minDate","isValid","maxDate","displayFormat","dateFilter","angular","isFunction","selectingYear","isBefore","add","isAfter","yearItems","currentIndex_","PAGE_SIZE","START","year","END","getItemAtIndex","index","getLength","Math","min","floor","abs","selectYear","animate","showYear","yearTopIndex","showCalendar","cancel","confirm","hide","toDate","animating","noop","then","CalendarCtrl","dow","localeData","firstDayOfWeek","weekDays","concat","weekdaysMin","slice","daysInMonth","getDaysInMonth","days","firstDay","day","length","arr","i","value","enabled","isDayEnabled","push","selectDate","dom","nextMonth","prevMonth","subtract","updateDaysInMonth","$watch","unix","newValue","oldValue","formatValidator","format","isDate","minDateValidator","isSameOrAfter","maxDateValidator","isSameOrBefore","filterValidator","filter","TimePickerCtrl","time","autoSwitch","VIEW_HOURS","VIEW_MINUTES","currentView","clockHours","parseInt","clockMinutes","minutes","switchView","setAM","hours","hour","setPM","ClockCtrl","TYPE_HOURS","TYPE_MINUTES","STEP_DEG","steps","CLOCK_TYPES","range","type","selected","getPointerStyle","divider","degrees","round","-webkit-transform","-ms-transform","transform","setTimeByDeg","deg","setTime","module","config","$mdIconProvider","mdpIconsRegistry","forEach","icon","id","url","run","$templateCache","put","svg","constant","directive","$mdUtil","restrict","priority","compile","element","inputContainer","getClosest","toggleClass","provider","LABEL_OK","LABEL_CANCEL","DISPLAY_FORMAT","setDisplayFormat","setOKButtonLabel","label","setCancelButtonLabel","$get","datePicker","Date","now","isObject","show","controller","controllerAs","clickOutsideToClose","template","targetEvent","locals","skipHide","$animate","bindToController","link","scope","attrs","ctrl","animElements","querySelector","map","a","direction","addClass","removeClass","$mdpDatePicker","require","transclude","noFloat","isDefined","mdpNoFloat","placeholder","mdpPlaceholder","openOnClick","mdpOpenOnClick","mdpDisabled","dateFormat","disabled","pre","ngModel","$transclude","post","updateInputElement","inputElement","inputContainerCtrl","setHasValue","$isEmpty","updateDate","strValue","$setViewValue","$pristine","messages","hasClass","$render","onInputElementEvents","event","target","$viewVaue","clone","append","model","isError","$invalid","$formatters","unshift","$validators","modelValue","viewValue","required","isUndefined","$parsers","parsed","$modelValue","originalModel","month","showPicker","ev","on","$on","off","replace","timepickerCtrl","$parent","timepicker","onEvent","containerCoords","currentTarget","getClientRects","x","offsetWidth","pageX","left","y","pageY","top","offsetHeight","atan2","PI","indexOf","e","timePicker","$mdpTimePicker","timeFormat","updateTime","$error","setInvalid","Object","keys","seconds"],"mappings":"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","file":"mdPickers.min.js","sourcesContent":["(function() {\n\"use strict\";\n/* global moment, angular */\n\nvar module = angular.module(\"mdPickers\", [\n\t\"ngMaterial\",\n\t\"ngAnimate\",\n\t\"ngAria\"\n]);\n\nmodule.config([\"$mdIconProvider\", \"mdpIconsRegistry\", function($mdIconProvider, mdpIconsRegistry) {\n\tangular.forEach(mdpIconsRegistry, function(icon, index) {\n\t\t$mdIconProvider.icon(icon.id, icon.url);\n\t});\n}]);\n\nmodule.run([\"$templateCache\", \"mdpIconsRegistry\", function($templateCache, mdpIconsRegistry) {\n\tangular.forEach(mdpIconsRegistry, function(icon, index) {\n\t\t$templateCache.put(icon.url, icon.svg);\n\t});\n}]);\nmodule.constant(\"mdpIconsRegistry\", [\n    {\n        id: 'mdp-chevron-left',\n        url: 'mdp-chevron-left.svg',\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\n    },\n    {\n        id: 'mdp-chevron-right',\n        url: 'mdp-chevron-right.svg',\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\n    },\n    {\n        id: 'mdp-access-time',\n        url: 'mdp-access-time.svg',\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M11.99 2C6.47 2 2 6.48 2 12s4.47 10 9.99 10C17.52 22 22 17.52 22 12S17.52 2 11.99 2zM12 20c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/><path d=\"M12.5 7H11v6l5.25 3.15.75-1.23-4.5-2.67z\"/></svg>'\n    },\n    {\n        id: 'mdp-event',\n        url: 'mdp-event.svg',\n        svg: '<svg height=\"24\" viewBox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>'\n    }\n]);\nmodule.directive(\"ngMessage\", [\"$mdUtil\", function($mdUtil) {\n   return {\n        restrict: \"EA\",\n        priority: 101,\n        compile: function(element) {\n            var inputContainer = $mdUtil.getClosest(element, \"mdp-time-picker\", true) ||\n                                 $mdUtil.getClosest(element, \"mdp-date-picker\", true);\n            \n            // If we are not a child of an input container, don't do anything\n            if (!inputContainer) return;\n            \n            // Add our animation class\n            element.toggleClass('md-input-message-animation', true);\n            \n            return {};\n        }\n    } \n}]);\n/* global moment, angular */\n\nfunction DatePickerCtrl ($scope, $mdDialog, $mdMedia, $timeout, currentDate, options) {\n    var self = this;\n\n    this.$onInit = function () {\n        self.date = moment(currentDate);\n        self.minDate = options.minDate && moment(options.minDate).isValid() ? moment(options.minDate) : null;\n        self.maxDate = options.maxDate && moment(options.maxDate).isValid() ? moment(options.maxDate) : null;\n        self.displayFormat = options.displayFormat || \"ddd, MMM DD\";\n        self.dateFilter = angular.isFunction(options.dateFilter) ? options.dateFilter : null;\n        self.selectingYear = false;\n\n        // validate min and max date\n        if (self.minDate && self.maxDate) {\n            if (self.maxDate.isBefore(self.minDate)) {\n                self.maxDate = moment(self.minDate).add(1, 'days');\n            }\n        }\n\n        if (self.date) {\n            // check min date\n            if (self.minDate && self.date.isBefore(self.minDate)) {\n                self.date = moment(self.minDate);\n            }\n\n            // check max date\n            if (self.maxDate && self.date.isAfter(self.maxDate)) {\n                self.date = moment(self.maxDate);\n            }\n        }\n\n        self.yearItems = {\n            currentIndex_: 0,\n            PAGE_SIZE: 5,\n            START: (self.minDate ? self.minDate.year() : 1900),\n            END: (self.maxDate ? self.maxDate.year() : 0),\n            getItemAtIndex: function (index) {\n                if (self.currentIndex_ < index)\n                    self.currentIndex_ = index;\n\n                return self.START + index;\n            },\n            getLength: function () {\n                return Math.min(\n                    self.currentIndex_ + Math.floor(self.PAGE_SIZE / 2),\n                    Math.abs(self.START - self.END) + 1\n                );\n            }\n        };\n\n        $scope.$mdMedia = $mdMedia;\n        $scope.year = this.date.year();\n    };\n\n    this.selectYear = function (year) {\n        self.date.year(year);\n        $scope.year = year;\n        self.selectingYear = false;\n        self.animate();\n    };\n\n    this.showYear = function () {\n        self.yearTopIndex = (self.date.year() - self.yearItems.START) + Math.floor(self.yearItems.PAGE_SIZE / 2);\n        self.yearItems.currentIndex_ = (self.date.year() - self.yearItems.START) + 1;\n        self.selectingYear = true;\n    };\n\n    this.showCalendar = function () {\n        self.selectingYear = false;\n    };\n\n    this.cancel = function () {\n        $mdDialog.cancel();\n    };\n\n    this.confirm = function () {\n        var date = this.date;\n\n        if (this.minDate && this.date.isBefore(this.minDate)) {\n            date = moment(this.minDate);\n        }\n\n        if (this.maxDate && this.date.isAfter(this.maxDate)) {\n            date = moment(this.maxDate);\n        }\n\n        $mdDialog.hide(date.toDate());\n    };\n\n    this.animate = function () {\n        self.animating = true;\n        $timeout(angular.noop).then(function () {\n            self.animating = false;\n        })\n    };\n}\n\nmodule.provider(\"$mdpDatePicker\", function () {\n    var LABEL_OK = \"OK\",\n        LABEL_CANCEL = \"Cancel\",\n        DISPLAY_FORMAT = \"ddd, MMM DD\";\n\n    this.setDisplayFormat = function (format) {\n        DISPLAY_FORMAT = format;\n    };\n\n    this.setOKButtonLabel = function (label) {\n        LABEL_OK = label;\n    };\n\n    this.setCancelButtonLabel = function (label) {\n        LABEL_CANCEL = label;\n    };\n\n    this.$get = [\"$mdDialog\", function ($mdDialog) {\n        var datePicker = function (currentDate, options) {\n            if (!angular.isDate(currentDate)) currentDate = Date.now();\n            if (!angular.isObject(options)) options = {};\n\n            options.displayFormat = DISPLAY_FORMAT;\n\n            return $mdDialog.show({\n                controller: ['$scope', '$mdDialog', '$mdMedia', '$timeout', 'currentDate', 'options', DatePickerCtrl],\n                controllerAs: 'datepicker',\n                clickOutsideToClose: true,\n                template: '<md-dialog aria-label=\"\" class=\"mdp-datepicker\" ng-class=\"{ \\'portrait\\': !$mdMedia(\\'gt-xs\\') }\">' +\n                '<md-dialog-content layout=\"row\" layout-wrap>' +\n                '<div layout=\"column\" layout-align=\"start center\">' +\n                '<md-toolbar layout-align=\"start start\" flex class=\"mdp-datepicker-date-wrapper md-hue-1 md-primary\" layout=\"column\">' +\n                '<span class=\"mdp-datepicker-year\" ng-click=\"datepicker.showYear()\" ng-class=\"{ \\'active\\': datepicker.selectingYear }\">{{ datepicker.date.format(\\'YYYY\\') }}</span>' +\n                '<span class=\"mdp-datepicker-date\" ng-click=\"datepicker.showCalendar()\" ng-class=\"{ \\'active\\': !datepicker.selectingYear }\">{{ datepicker.date.format(datepicker.displayFormat) }}</span> ' +\n                '</md-toolbar>' +\n                '</div>' +\n                '<div>' +\n                '<div class=\"mdp-datepicker-select-year mdp-animation-zoom\" layout=\"column\" layout-align=\"center start\" ng-if=\"datepicker.selectingYear\">' +\n                '<md-virtual-repeat-container md-auto-shrink md-top-index=\"datepicker.yearTopIndex\">' +\n                '<div flex md-virtual-repeat=\"item in datepicker.yearItems\" md-on-demand class=\"repeated-year\">' +\n                '<span class=\"md-button\" ng-click=\"datepicker.selectYear(item)\" md-ink-ripple ng-class=\"{ \\'md-primary current\\': item == year }\">{{ item }}</span>' +\n                '</div>' +\n                '</md-virtual-repeat-container>' +\n                '</div>' +\n                '<mdp-calendar ng-if=\"!datepicker.selectingYear\" class=\"mdp-animation-zoom\" date=\"datepicker.date\" min-date=\"datepicker.minDate\" date-filter=\"datepicker.dateFilter\" max-date=\"datepicker.maxDate\"></mdp-calendar>' +\n                '<md-dialog-actions layout=\"row\">' +\n                '<span flex></span>' +\n                '<md-button ng-click=\"datepicker.cancel()\" aria-label=\"' + LABEL_CANCEL + '\">' + LABEL_CANCEL + '</md-button>' +\n                '<md-button ng-click=\"datepicker.confirm()\" class=\"md-primary\" aria-label=\"' + LABEL_OK + '\">' + LABEL_OK + '</md-button>' +\n                '</md-dialog-actions>' +\n                '</div>' +\n                '</md-dialog-content>' +\n                '</md-dialog>',\n                targetEvent: options.targetEvent,\n                locals: {\n                    currentDate: currentDate,\n                    options: options\n                },\n                skipHide: true\n            });\n        };\n\n        return datePicker;\n    }];\n});\n\nfunction CalendarCtrl ($scope) {\n    var self = this;\n\n    this.$onInit = function () {\n        self.dow = moment.localeData().firstDayOfWeek();\n\n        self.weekDays = [].concat(\n            moment.weekdaysMin().slice(\n                self.dow\n            ),\n            moment.weekdaysMin().slice(\n                0,\n                self.dow\n            )\n        );\n\n        self.daysInMonth = [];\n    };\n\n    this.getDaysInMonth = function () {\n        var days = self.date.daysInMonth(),\n            firstDay = moment(self.date).date(1).day() - this.dow;\n\n        if (firstDay < 0) firstDay = this.weekDays.length - 1;\n\n\n        var arr = [];\n        for (var i = 1; i <= (firstDay + days); i++) {\n            var day = null;\n            if (i > firstDay) {\n                day = {\n                    value: (i - firstDay),\n                    enabled: self.isDayEnabled(moment(self.date).date(i - firstDay).toDate())\n                };\n            }\n            arr.push(day);\n        }\n\n        return arr;\n    };\n\n    this.isDayEnabled = function (day) {\n        return (!this.minDate || this.minDate <= day) &&\n            (!this.maxDate || this.maxDate >= day) &&\n            (!self.dateFilter || !self.dateFilter(day));\n    };\n\n    this.selectDate = function (dom) {\n        self.date.date(dom);\n    };\n\n    this.nextMonth = function () {\n        self.date.add(1, 'months');\n    };\n\n    this.prevMonth = function () {\n        self.date.subtract(1, 'months');\n    };\n\n    this.updateDaysInMonth = function () {\n        self.daysInMonth = self.getDaysInMonth();\n    };\n\n    $scope.$watch(function () {\n        return self.date.unix()\n    }, function (newValue, oldValue) {\n        if (newValue && newValue !== oldValue)\n            self.updateDaysInMonth();\n    })\n\n    self.updateDaysInMonth();\n}\n\nmodule.directive(\"mdpCalendar\", [\"$animate\", function ($animate) {\n    return {\n        restrict: 'E',\n        bindToController: {\n            \"date\": \"=\",\n            \"minDate\": \"=\",\n            \"maxDate\": \"=\",\n            \"dateFilter\": \"=\"\n        },\n        template: '<div class=\"mdp-calendar\">' +\n        '<div layout=\"row\" layout-align=\"space-between center\">' +\n        '<md-button aria-label=\"previous month\" class=\"md-icon-button\" ng-click=\"calendar.prevMonth()\"><md-icon md-svg-icon=\"mdp-chevron-left\"></md-icon></md-button>' +\n        '<div class=\"mdp-calendar-monthyear\" ng-show=\"!calendar.animating\">{{ calendar.date.format(\"MMMM YYYY\") }}</div>' +\n        '<md-button aria-label=\"next month\" class=\"md-icon-button\" ng-click=\"calendar.nextMonth()\"><md-icon md-svg-icon=\"mdp-chevron-right\"></md-icon></md-button>' +\n        '</div>' +\n        '<div layout=\"row\" layout-align=\"space-around center\" class=\"mdp-calendar-week-days\" ng-show=\"!calendar.animating\">' +\n        '<div layout layout-align=\"center center\" ng-repeat=\"d in calendar.weekDays track by $index\">{{ d }}</div>' +\n        '</div>' +\n        '<div layout=\"row\" layout-align=\"start center\" layout-wrap class=\"mdp-calendar-days\" ng-class=\"{ \\'mdp-animate-next\\': calendar.animating }\" ng-show=\"!calendar.animating\" md-swipe-left=\"calendar.nextMonth()\" md-swipe-right=\"calendar.prevMonth()\">' +\n        '<div layout layout-align=\"center center\" ng-repeat-start=\"day in calendar.daysInMonth track by $index\" ng-class=\"{ \\'mdp-day-placeholder\\': !day }\">' +\n        '<md-button class=\"md-icon-button md-raised\" aria-label=\"Select day\" ng-if=\"day\" ng-class=\"{ \\'md-accent\\': calendar.date.date() == day.value }\" ng-click=\"calendar.selectDate(day.value)\" ng-disabled=\"!day.enabled\">{{ day.value }}</md-button>' +\n        '</div>' +\n        '<div flex=\"100\" ng-if=\"($index + 1) % 7 == 0\" ng-repeat-end></div>' +\n        '</div>' +\n        '</div>',\n        controller: [\"$scope\", CalendarCtrl],\n        controllerAs: \"calendar\",\n        link: function (scope, element, attrs, ctrl) {\n            var animElements = [\n                element[0].querySelector(\".mdp-calendar-week-days\"),\n                element[0].querySelector('.mdp-calendar-days'),\n                element[0].querySelector('.mdp-calendar-monthyear')\n            ].map(function (a) {\n                return angular.element(a);\n            });\n\n            scope.$watch(function () {\n                return ctrl.date.format(\"YYYYMM\")\n            }, function (newValue, oldValue) {\n                var direction = null;\n\n                if (newValue > oldValue)\n                    direction = \"mdp-animate-next\";\n                else if (newValue < oldValue)\n                    direction = \"mdp-animate-prev\";\n\n                if (direction) {\n                    for (var i in animElements) {\n                        animElements[i].addClass(direction);\n                        $animate.removeClass(animElements[i], direction);\n                    }\n                }\n            });\n        }\n    }\n}]);\n\nfunction formatValidator (value, format) {\n    return !value || angular.isDate(value) || moment(value, format, true).isValid();\n}\n\nfunction minDateValidator (value, format, minDate) {\n    var minDate = moment(minDate, \"YYYY-MM-DD\", true);\n    var date = angular.isDate(value) ? moment(value) : moment(value, format, true);\n\n    return !value ||\n        angular.isDate(value) || !minDate.isValid() ||\n        date.isSameOrAfter(minDate);\n}\n\nfunction maxDateValidator (value, format, maxDate) {\n    var maxDate = moment(maxDate, \"YYYY-MM-DD\", true);\n    var date = angular.isDate(value) ? moment(value) : moment(value, format, true);\n\n    return !value ||\n        angular.isDate(value) || !maxDate.isValid() ||\n        date.isSameOrBefore(maxDate);\n}\n\nfunction filterValidator (value, format, filter) {\n    var date = angular.isDate(value) ? moment(value) : moment(value, format, true);\n\n    return !value ||\n        angular.isDate(value) || !angular.isFunction(filter) || !filter(date);\n}\n\nfunction requiredValidator (value, ngModel) {\n    return value\n}\n\nmodule.directive(\"mdpDatePicker\", [\"$mdpDatePicker\", \"$timeout\", function ($mdpDatePicker, $timeout) {\n    return {\n        restrict: 'E',\n        require: 'ngModel',\n        transclude: true,\n        template: function (element, attrs) {\n            var noFloat = angular.isDefined(attrs.mdpNoFloat),\n                placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\n                openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\n\n            return '<div layout layout-align=\"start start\">' +\n                '<md-button' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + ' class=\"md-icon-button\" ng-click=\"showPicker($event)\">' +\n                '<md-icon md-svg-icon=\"mdp-event\"></md-icon>' +\n                '</md-button>' +\n                '<md-input-container' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\">' +\n                '<input type=\"{{ ::type }}\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + ' aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\n                '</md-input-container>' +\n                '</div>';\n        },\n        scope: {\n            \"minDate\": \"=mdpMinDate\",\n            \"maxDate\": \"=mdpMaxDate\",\n            \"dateFilter\": \"=mdpDateFilter\",\n            \"dateFormat\": \"@mdpFormat\",\n            \"placeholder\": \"@mdpPlaceholder\",\n            \"noFloat\": \"=mdpNoFloat\",\n            \"openOnClick\": \"=mdpOpenOnClick\",\n            \"disabled\": \"=?mdpDisabled\"\n        },\n        link: {\n            pre: function (scope, element, attrs, ngModel, $transclude) {\n\n            },\n            post: function (scope, element, attrs, ngModel, $transclude) {\n                var inputElement = angular.element(element[0].querySelector('input')),\n                    inputContainer = angular.element(element[0].querySelector('md-input-container')),\n                    inputContainerCtrl = inputContainer.controller(\"mdInputContainer\");\n\n                $transclude(function (clone) {\n                    inputContainer.append(clone);\n                });\n\n                var messages = angular.element(inputContainer[0].querySelector(\"[ng-messages]\"));\n\n                scope.type = scope.dateFormat ? \"text\" : \"date\"\n                scope.dateFormat = scope.dateFormat || \"YYYY-MM-DD\";\n                scope.model = ngModel;\n\n                scope.isError = function () {\n                    return !ngModel.$pristine && !!ngModel.$invalid;\n                };\n\n                // update input element if model has changed\n                ngModel.$formatters.unshift(function (value) {\n                    var date = angular.isDate(value) && moment(value);\n                    if (date && date.isValid())\n                        updateInputElement(date.format(scope.dateFormat));\n                    else\n                        updateInputElement(null);\n                });\n\n                ngModel.$validators.format = function (modelValue, viewValue) {\n                    return formatValidator(viewValue, scope.dateFormat);\n                };\n\n                ngModel.$validators.minDate = function (modelValue, viewValue) {\n                    return minDateValidator(viewValue, scope.dateFormat, scope.minDate);\n                };\n\n                ngModel.$validators.maxDate = function (modelValue, viewValue) {\n                    return maxDateValidator(viewValue, scope.dateFormat, scope.maxDate);\n                };\n\n                ngModel.$validators.filter = function (modelValue, viewValue) {\n                    return filterValidator(viewValue, scope.dateFormat, scope.dateFilter);\n                };\n\n                ngModel.$validators.required = function (modelValue, viewValue) {\n                    return angular.isUndefined(attrs.required) || !ngModel.$isEmpty(modelValue) || !ngModel.$isEmpty(viewValue);\n                };\n\n                ngModel.$parsers.unshift(function (value) {\n                    var parsed = moment(value, scope.dateFormat, true);\n                    if (parsed.isValid()) {\n                        if (angular.isDate(ngModel.$modelValue)) {\n                            var originalModel = moment(ngModel.$modelValue);\n                            originalModel.year(parsed.year());\n                            originalModel.month(parsed.month());\n                            originalModel.date(parsed.date());\n\n                            parsed = originalModel;\n                        }\n                        return parsed.toDate();\n                    } else\n                        return null;\n                });\n\n                // update input element value\n                function updateInputElement (value) {\n                    inputElement[0].value = value;\n                    inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\n                }\n\n                function updateDate (date) {\n                    var value = moment(date, angular.isDate(date) ? null : scope.dateFormat, true),\n                        strValue = value.format(scope.dateFormat);\n\n                    if (value.isValid()) {\n                        updateInputElement(strValue);\n                        ngModel.$setViewValue(strValue);\n                    } else {\n                        updateInputElement(date);\n                        ngModel.$setViewValue(date);\n                    }\n\n                    if (!ngModel.$pristine &&\n                        messages.hasClass(\"md-auto-hide\") &&\n                        inputContainer.hasClass(\"md-input-invalid\")) messages.removeClass(\"md-auto-hide\");\n\n                    ngModel.$render();\n                }\n\n                scope.showPicker = function (ev) {\n                    $mdpDatePicker(ngModel.$modelValue, {\n                        minDate: scope.minDate,\n                        maxDate: scope.maxDate,\n                        dateFilter: scope.dateFilter,\n                        targetEvent: ev\n                    }).then(updateDate);\n                };\n\n                function onInputElementEvents (event) {\n                    if (event.target.value !== ngModel.$viewVaue)\n                        updateDate(event.target.value);\n                }\n\n                inputElement.on(\"reset input blur\", onInputElementEvents);\n\n                scope.$on(\"$destroy\", function () {\n                    inputElement.off(\"reset input blur\", onInputElementEvents);\n                });\n            }\n        }\n    };\n}]);\n\n\nmodule.directive(\"mdpDatePicker\", [\"$mdpDatePicker\", \"$timeout\", function ($mdpDatePicker, $timeout) {\n    return {\n        restrict: 'A',\n        require: 'ngModel',\n        scope: {\n            \"minDate\": \"@min\",\n            \"maxDate\": \"@max\",\n            \"dateFilter\": \"=mdpDateFilter\",\n            \"dateFormat\": \"@mdpFormat\",\n        },\n        link: function (scope, element, attrs, ngModel, $transclude) {\n            scope.dateFormat = scope.dateFormat || \"YYYY-MM-DD\";\n\n            ngModel.$validators.format = function (modelValue, viewValue) {\n                return formatValidator(viewValue, scope.format);\n            };\n\n            ngModel.$validators.minDate = function (modelValue, viewValue) {\n                return minDateValidator(viewValue, scope.format, scope.minDate);\n            };\n\n            ngModel.$validators.maxDate = function (modelValue, viewValue) {\n                return maxDateValidator(viewValue, scope.format, scope.maxDate);\n            };\n\n            ngModel.$validators.filter = function (modelValue, viewValue) {\n                return filterValidator(viewValue, scope.format, scope.dateFilter);\n            };\n\n            function showPicker (ev) {\n                $mdpDatePicker(ngModel.$modelValue, {\n                    minDate: scope.minDate,\n                    maxDate: scope.maxDate,\n                    dateFilter: scope.dateFilter,\n                    targetEvent: ev\n                }).then(function (time) {\n                    ngModel.$setViewValue(moment(time).format(scope.format));\n                    ngModel.$render();\n                });\n            };\n\n            element.on(\"click\", showPicker);\n\n            scope.$on(\"$destroy\", function () {\n                element.off(\"click\", showPicker);\n            });\n        }\n    }\n}]);\n/* global moment, angular */\n\nfunction TimePickerCtrl($scope, $mdDialog, time, autoSwitch, $mdMedia) {\n\tvar self = this;\n\n    this.$onInit = function () {\n        self.VIEW_HOURS = 1;\n        self.VIEW_MINUTES = 2;\n        self.currentView = self.VIEW_HOURS;\n        self.time = moment(time);\n        self.autoSwitch = !!autoSwitch;\n        self.clockHours = parseInt(self.time.format(\"h\"));\n        self.clockMinutes = parseInt(self.time.minutes());\n        $scope.$mdMedia = $mdMedia;\n    };\n    \n\t\n\tthis.switchView = function() {\n\t    self.currentView = self.currentView == self.VIEW_HOURS ? self.VIEW_MINUTES : self.VIEW_HOURS;\n\t};\n    \n\tthis.setAM = function() {\n        if(self.time.hours() >= 12)\n            self.time.hour(self.time.hour() - 12);\n\t};\n    \n    this.setPM = function() {\n        if(self.time.hours() < 12)\n            self.time.hour(self.time.hour() + 12);\n\t};\n    \n    this.cancel = function() {\n        $mdDialog.cancel();\n    };\n\n    this.confirm = function() {\n        $mdDialog.hide(this.time.toDate());\n    };\n}\n\nfunction ClockCtrl($scope) {\n    var TYPE_HOURS = \"hours\";\n    var TYPE_MINUTES = \"minutes\";\n    var self = this;\n\n    this.$onInit = function() {\n        this.STEP_DEG = 360 / 12;\n        self.steps = [];\n\n        self.CLOCK_TYPES = {\n            \"hours\": {\n                range: 12\n            },\n            \"minutes\": {\n                range: 60\n            }\n        };\n        self.type = self.type || \"hours\";\n        switch(self.type) {\n            case TYPE_HOURS:\n                for(var i = 1; i <= 12; i++)\n                    self.steps.push(i);\n                self.selected = self.time.hours() || 0;\n                if(self.selected > 12) self.selected -= 12;\n\n                break;\n            case TYPE_MINUTES:\n                for(var i = 5; i <= 55; i+=5)\n                    self.steps.push(i);\n                self.steps.push(0);\n                self.selected = self.time.minutes() || 0;\n\n                break;\n        }\n    };\n    \n    this.getPointerStyle = function() {\n        var divider = 1;\n        switch(self.type) {\n            case TYPE_HOURS:\n                divider = 12;\n                break;\n            case TYPE_MINUTES:\n                divider = 60;\n                break;\n        }  \n        var degrees = Math.round(self.selected * (360 / divider)) - 180;\n        return { \n            \"-webkit-transform\": \"rotate(\" + degrees + \"deg)\",\n            \"-ms-transform\": \"rotate(\" + degrees + \"deg)\",\n            \"transform\": \"rotate(\" + degrees + \"deg)\"\n        }\n    };\n    \n    this.setTimeByDeg = function(deg) {\n        deg = deg >= 360 ? 0 : deg;\n        var divider = 0;\n        switch(self.type) {\n            case TYPE_HOURS:\n                divider = 12;\n                break;\n            case TYPE_MINUTES:\n                divider = 60;\n                break;\n        }  \n        \n        self.setTime(\n            Math.round(divider / 360 * deg)\n        );\n    };\n    \n    this.setTime = function(time, type) {\n        this.selected = time;\n        \n        switch(self.type) {\n            case TYPE_HOURS:\n                if(self.time.format(\"A\") == \"PM\") time += 12;\n                this.time.hours(time);\n                break;\n            case TYPE_MINUTES:\n                if(time > 59) time -= 60;\n                this.time.minutes(time);\n                break;\n        }\n        \n    };\n}\n\nmodule.directive(\"mdpClock\", [\"$animate\", \"$timeout\", function($animate, $timeout) {\n    return {\n        restrict: 'E',\n        bindToController: {\n            'type': '@?',\n            'time': '=',\n            'autoSwitch': '=?'\n        },\n        replace: true,\n        template: '<div class=\"mdp-clock\">' +\n                        '<div class=\"mdp-clock-container\">' +\n                            '<md-toolbar class=\"mdp-clock-center md-primary\"></md-toolbar>' +\n                            '<md-toolbar ng-style=\"clock.getPointerStyle()\" class=\"mdp-pointer md-primary\">' +\n                                '<span class=\"mdp-clock-selected md-button md-raised md-primary\"></span>' +\n                            '</md-toolbar>' +\n                            '<md-button ng-class=\"{ \\'md-primary\\': clock.selected == step }\" class=\"md-icon-button md-raised mdp-clock-deg{{ ::(clock.STEP_DEG * ($index + 1)) }}\" ng-repeat=\"step in clock.steps\" ng-click=\"clock.setTime(step)\">{{ step }}</md-button>' +\n                        '</div>' +\n                    '</div>',\n        controller: [\"$scope\", ClockCtrl],\n        controllerAs: \"clock\",\n        link: function(scope, element, attrs, ctrl) {\n            var pointer = angular.element(element[0].querySelector(\".mdp-pointer\")),\n                timepickerCtrl = scope.$parent.timepicker;\n            \n            var onEvent = function(event) {\n                var containerCoords = event.currentTarget.getClientRects()[0];\n                var x = ((event.currentTarget.offsetWidth / 2) - (event.pageX - containerCoords.left)),\n                    y = ((event.pageY - containerCoords.top) - (event.currentTarget.offsetHeight / 2));\n\n                var deg = Math.round((Math.atan2(x, y) * (180 / Math.PI)));\n                $timeout(function() {\n                    ctrl.setTimeByDeg(deg + 180);\n                    if(ctrl.autoSwitch && [\"mouseup\", \"click\"].indexOf(event.type) !== -1 && timepickerCtrl) timepickerCtrl.switchView();\n                });\n            }; \n            \n            element.on(\"mousedown\", function() {\n               element.on(\"mousemove\", onEvent);\n            });\n            \n            element.on(\"mouseup\", function(e) {\n                element.off(\"mousemove\");\n            });\n            \n            element.on(\"click\", onEvent);\n            scope.$on(\"$destroy\", function() {\n                element.off(\"click\", onEvent);\n                element.off(\"mousemove\", onEvent); \n            });\n        }\n    }\n}]);\n\nmodule.provider(\"$mdpTimePicker\", function() {\n    var LABEL_OK = \"OK\",\n        LABEL_CANCEL = \"Cancel\";\n        \n    this.setOKButtonLabel = function(label) {\n        LABEL_OK = label;\n    };\n    \n    this.setCancelButtonLabel = function(label) {\n        LABEL_CANCEL = label;\n    };\n    \n    this.$get = [\"$mdDialog\", function($mdDialog) {\n        var timePicker = function(time, options) {\n            if(!angular.isDate(time)) time = Date.now();\n            if (!angular.isObject(options)) options = {};\n    \n            return $mdDialog.show({\n                controller:  ['$scope', '$mdDialog', 'time', 'autoSwitch', '$mdMedia', TimePickerCtrl],\n                controllerAs: 'timepicker',\n                clickOutsideToClose: true,\n                template: '<md-dialog aria-label=\"\" class=\"mdp-timepicker\" ng-class=\"{ \\'portrait\\': !$mdMedia(\\'gt-xs\\') }\">' +\n                            '<md-dialog-content layout-gt-xs=\"row\" layout-wrap>' +\n                                '<md-toolbar layout-gt-xs=\"column\" layout-xs=\"row\" layout-align=\"center center\" flex class=\"mdp-timepicker-time md-hue-1 md-primary\">' +\n                                    '<div class=\"mdp-timepicker-selected-time\">' +\n                                        '<span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_HOURS }\" ng-click=\"timepicker.currentView = timepicker.VIEW_HOURS\">{{ timepicker.time.format(\"h\") }}</span>:' + \n                                        '<span ng-class=\"{ \\'active\\': timepicker.currentView == timepicker.VIEW_MINUTES }\" ng-click=\"timepicker.currentView = timepicker.VIEW_MINUTES\">{{ timepicker.time.format(\"mm\") }}</span>' +\n                                    '</div>' +\n                                    '<div layout=\"column\" class=\"mdp-timepicker-selected-ampm\">' + \n                                        '<span ng-click=\"timepicker.setAM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() < 12 }\">AM</span>' +\n                                        '<span ng-click=\"timepicker.setPM()\" ng-class=\"{ \\'active\\': timepicker.time.hours() >= 12 }\">PM</span>' +\n                                    '</div>' + \n                                '</md-toolbar>' +\n                                '<div>' +\n                                    '<div class=\"mdp-clock-switch-container\" ng-switch=\"timepicker.currentView\" layout layout-align=\"center center\">' +\n\t                                    '<mdp-clock class=\"mdp-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"hours\" ng-switch-when=\"1\"></mdp-clock>' +\n\t                                    '<mdp-clock class=\"mdp-animation-zoom\" auto-switch=\"timepicker.autoSwitch\" time=\"timepicker.time\" type=\"minutes\" ng-switch-when=\"2\"></mdp-clock>' +\n                                    '</div>' +\n                                    \n                                    '<md-dialog-actions layout=\"row\">' +\n\t                                \t'<span flex></span>' +\n                                        '<md-button ng-click=\"timepicker.cancel()\" aria-label=\"' + LABEL_CANCEL + '\">' + LABEL_CANCEL + '</md-button>' +\n                                        '<md-button ng-click=\"timepicker.confirm()\" class=\"md-primary\" aria-label=\"' + LABEL_OK + '\">' + LABEL_OK + '</md-button>' +\n                                    '</md-dialog-actions>' +\n                                '</div>' +\n                            '</md-dialog-content>' +\n                        '</md-dialog>',\n                targetEvent: options.targetEvent,\n                locals: {\n                    time: time,\n                    autoSwitch: options.autoSwitch\n                },\n                skipHide: true\n            });\n        };\n    \n        return timePicker;\n    }];\n});\n\nmodule.directive(\"mdpTimePicker\", [\"$mdpTimePicker\", \"$timeout\", function($mdpTimePicker, $timeout) {\n    return  {\n        restrict: 'E',\n        require: 'ngModel',\n        transclude: true,\n        template: function(element, attrs) {\n            var noFloat = angular.isDefined(attrs.mdpNoFloat),\n                placeholder = angular.isDefined(attrs.mdpPlaceholder) ? attrs.mdpPlaceholder : \"\",\n                openOnClick = angular.isDefined(attrs.mdpOpenOnClick) ? true : false;\n            \n            return '<div layout layout-align=\"start start\">' +\n                    '<md-button class=\"md-icon-button\" ng-click=\"showPicker($event)\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + '>' +\n                        '<md-icon md-svg-icon=\"mdp-access-time\"></md-icon>' +\n                    '</md-button>' +\n                    '<md-input-container' + (noFloat ? ' md-no-float' : '') + ' md-is-error=\"isError()\">' +\n                        '<input type=\"{{ ::type }}\"' + (angular.isDefined(attrs.mdpDisabled) ? ' ng-disabled=\"disabled\"' : '') + ' aria-label=\"' + placeholder + '\" placeholder=\"' + placeholder + '\"' + (openOnClick ? ' ng-click=\"showPicker($event)\" ' : '') + ' />' +\n                    '</md-input-container>' +\n                '</div>';\n        },\n        scope: {\n            \"timeFormat\": \"@mdpFormat\",\n            \"placeholder\": \"@mdpPlaceholder\",\n            \"autoSwitch\": \"=?mdpAutoSwitch\",\n            \"disabled\": \"=?mdpDisabled\"\n        },\n        link: function(scope, element, attrs, ngModel, $transclude) {\n            var inputElement = angular.element(element[0].querySelector('input')),\n                inputContainer = angular.element(element[0].querySelector('md-input-container')),\n                inputContainerCtrl = inputContainer.controller(\"mdInputContainer\");\n                \n            $transclude(function(clone) {\n               inputContainer.append(clone); \n            });\n            \n            var messages = angular.element(inputContainer[0].querySelector(\"[ng-messages]\"));\n            \n            scope.type = scope.timeFormat ? \"text\" : \"time\"\n            scope.timeFormat = scope.timeFormat || \"HH:mm\";\n            scope.autoSwitch = scope.autoSwitch || false;\n            \n            scope.$watch(function() { return ngModel.$error }, function(newValue, oldValue) {\n                inputContainerCtrl.setInvalid(!ngModel.$pristine && !!Object.keys(ngModel.$error).length);\n            }, true);\n            \n            // update input element if model has changed\n            ngModel.$formatters.unshift(function(value) {\n                var time = angular.isDate(value) && moment(value);\n                if(time && time.isValid()) \n                    updateInputElement(time.format(scope.timeFormat));\n                else\n                    updateInputElement(null);\n            });\n            \n            ngModel.$validators.format = function(modelValue, viewValue) {\n                return !viewValue || angular.isDate(viewValue) || moment(viewValue, scope.timeFormat, true).isValid();\n            };\n            \n            ngModel.$validators.required = function(modelValue, viewValue) {\n                return angular.isUndefined(attrs.required) || !ngModel.$isEmpty(modelValue) || !ngModel.$isEmpty(viewValue);\n            };\n            \n            ngModel.$parsers.unshift(function(value) {\n                var parsed = moment(value, scope.timeFormat, true);\n                if(parsed.isValid()) {\n                    if(angular.isDate(ngModel.$modelValue)) {\n                        var originalModel = moment(ngModel.$modelValue);\n                        originalModel.minutes(parsed.minutes());\n                        originalModel.hours(parsed.hours());\n                        originalModel.seconds(parsed.seconds());\n                        \n                        parsed = originalModel;\n                    }\n                    return parsed.toDate(); \n                } else\n                    return null;\n            });\n            \n            // update input element value\n            function updateInputElement(value) {\n                inputElement[0].value = value;\n                inputContainerCtrl.setHasValue(!ngModel.$isEmpty(value));\n            }\n            \n            function updateTime(time) {\n                var value = moment(time, angular.isDate(time) ? null : scope.timeFormat, true),\n                    strValue = value.format(scope.timeFormat);\n\n                if(value.isValid()) {\n                    updateInputElement(strValue);\n                    ngModel.$setViewValue(strValue);\n                } else {\n                    updateInputElement(time);\n                    ngModel.$setViewValue(time);\n                }\n                \n                if(!ngModel.$pristine && \n                    messages.hasClass(\"md-auto-hide\") && \n                    inputContainer.hasClass(\"md-input-invalid\")) messages.removeClass(\"md-auto-hide\");\n                \n                ngModel.$render();\n            }\n                \n            scope.showPicker = function(ev) {\n                $mdpTimePicker(ngModel.$modelValue, {\n                    targetEvent: ev,\n                    autoSwitch: scope.autoSwitch\n                }).then(function(time) {\n                    updateTime(time, true);\n                });\n            };\n            \n            function onInputElementEvents(event) {\n                if(event.target.value !== ngModel.$viewVaue)\n                    updateTime(event.target.value);\n            }\n            \n            inputElement.on(\"reset input blur\", onInputElementEvents);\n            \n            scope.$on(\"$destroy\", function() {\n                inputElement.off(\"reset input blur\", onInputElementEvents);\n            })\n        }\n    };\n}]);\n\nmodule.directive(\"mdpTimePicker\", [\"$mdpTimePicker\", \"$timeout\", function($mdpTimePicker, $timeout) {\n    return  {\n        restrict: 'A',\n        require: 'ngModel',\n        scope: {\n            \"timeFormat\": \"@mdpFormat\",\n            \"autoSwitch\": \"=?mdpAutoSwitch\",\n        },\n        link: function(scope, element, attrs, ngModel, $transclude) {\n            scope.format = scope.format || \"HH:mm\";\n            function showPicker(ev) {\n                $mdpTimePicker(ngModel.$modelValue, {\n                    targetEvent: ev,\n                    autoSwitch: scope.autoSwitch\n                }).then(function(time) {\n                    ngModel.$setViewValue(moment(time).format(scope.format));\n                    ngModel.$render();\n                });\n            };\n            \n            element.on(\"click\", showPicker);\n            \n            scope.$on(\"$destroy\", function() {\n                element.off(\"click\", showPicker);\n            });\n        }\n    }\n}]);\n\n})();"]}